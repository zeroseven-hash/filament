material {
    name : whiten,
    parameters : [
        {
            type : sampler2d,
            name : beautyinput,
            precision : medium
        },
        {
            type : float2,
            name : texSize,
            precision : high
        }
        
    ],
  
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = uvToRenderTargetUV(postProcess.normalizedUV);
    }
}

fragment {
    void dummy(){}
    void postProcess(inout PostProcessInputs postProcess) {
        highp vec2 uv = variable_vertex.xy; // interpolated at pixel's center
        //vec3 data = texelFetch(materialParams_beautyinput, vec3(uv, 0.0), 0.0).rgb;

        highp vec2 texSize=materialParams.texSize;
        highp vec2 texelSize = 1.0 / vec2(texSize);

        const int KERNEL_RADIUS = 10;
        const float SIGMA_SPATIAL = 4.0;
        const float SIGMA_RANGE = 0.1;

        // 获取中心像素的颜色值
        highp vec3 centerColor = textureLod(materialParams_beautyinput, uv, 0.0).rgb;

        // 初始化累加器
        highp vec3 accumulatedColor = vec3(0.0);
        highp float totalWeight = 0.0;

        // 预计算高斯函数的因子，提高效率
        // exp(-x^2 / (2*sigma^2))
        highp float gaussFactorSpatial = -0.5 / (SIGMA_SPATIAL * SIGMA_SPATIAL);
        highp float gaussFactorRange   = -0.5 / (SIGMA_RANGE * SIGMA_RANGE);

        // 遍历卷积核覆盖的邻域
        for (int x = -KERNEL_RADIUS; x <= KERNEL_RADIUS; ++x) {
            for (int y = -KERNEL_RADIUS; y <= KERNEL_RADIUS; ++y) {
                // 计算邻域像素的 UV 坐标
                highp vec2 offset = vec2(float(x), float(y));
                highp vec2 neighborUv = uv + offset * texelSize;

                // 获取邻域像素的颜色值
                highp vec3 neighborColor = textureLod(materialParams_beautyinput, neighborUv, 0.0).rgb;

                // 1. 计算空间权重 (Spatial Weight)
                //    基于像素间的几何距离 (使用像素偏移量的平方距离)
                highp float distanceSq = dot(offset, offset); // 像素偏移距离的平方
                highp float spatialWeight = exp(distanceSq * gaussFactorSpatial);

                // 2. 计算范围权重 (Range Weight)
                //    基于像素间的颜色/强度差异
                highp vec3 colorDiff = centerColor - neighborColor;
                highp float colorDistanceSq = dot(colorDiff, colorDiff); // 颜色距离的平方 (L2 范数平方)
                highp float rangeWeight = exp(colorDistanceSq * gaussFactorRange);

                // 3. 组合权重
                highp float weight = spatialWeight * rangeWeight;

                // 累加加权颜色和总权重
                accumulatedColor += neighborColor * weight;
                totalWeight += weight;
            }
        }

        // 归一化，得到最终的滤波后颜色
        // 检查 totalWeight 防止除以零 (虽然在 KERNEL_RADIUS >= 0 时不太可能为零)
        if (totalWeight > 1e-6) { // 使用一个小的 epsilon 增加鲁棒性
            postProcess.color.rgb = accumulatedColor / totalWeight;
        } else {
            // 如果权重为零（非常罕见），则保持原始颜色
            postProcess.color.rgb = centerColor;
        }

        //vec3 data=textureLod(materialParams_beautyinput,uv,0.0).rgb;
        //postProcess.color.rgb=data.rgb;
        //postProcess.color.rg=uv;
    }
}
